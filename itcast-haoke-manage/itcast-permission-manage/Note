2020-01-16 20:58
架起git服务器，https://github.com/qiguoren1988
用户名：qiguoren1988  密码：5323796ASd
已经上传代码到服务器上，准备更新项目第一天内容

第一天：
    为什么需要权限管理？
        1.安全性：误操作，人为破坏，数据泄露
            举例：在mysql中，企业项目代码中链接mysql时，通常会用个单独的账户，这个账户只能对指定的账户作增删改查操作，
        同时会限定IP地址，平时开发人员链接mysql时，也是使用一个单独的账户，这个账户只能做查询操作，dba作为数据库的管
        理员，可以拥有数据库操作的所有权限，划重点：------------->为什么要这样做权限区分呢？？？

            首先说一下开发人员的只读账户，许多开发人员在拿到这个只读账户的时候，很自然的去链接数据库，检查下账户是否可
            用，而客户端可以在界面上轻易的修改数据，这个修改可能只是不小心碰了一下鼠标，为了防止这种误操作，开发人员账
            户设置只读就是必须的了

            再举个栗子，有时候系统debug，系统存入数据库的数据是错的，假如这时候开发人员的账户有修改权限，就会选择直接
            连接数据库去修改数据，这种操作会因此出现的很频繁，而且bedug比较严重，这种操作很有可能给之后确定问题的原因
            带来麻烦，因为数据和代码已经对不上了。同时这时候如果改错了，那么更麻烦，因此实际中遇到这种问题，都会放给
            dba取执行，同时操纵给相关人员知晓，

            再换个角度，开发人员拿到账户后，都需要记录下来防止忘记，就很容易被其他人拿到，这种情况下，开发人员使用的账
            户只开放只读权限，是很有必要的

            再说一下项目里的账户，因为是项目适用，那么这个账户就应该具有对数据的增删改查这几个基本的功能的操作，但是这
            个账户很容易被看到代码里的开发人员拿到，因此为了安全起见，我们会限定这个账户只能在固定的服务器上执行

            再举个例子，linux服务器上root用户和普通用户，登录到服务器上的人可能是管理员也可能是普通用户，管理员可以根据
        需要在服务器上安装一些软件，控服务器的运行状态，删除一些没用的文件，而普通用户登录到服务器上，可能只是上去查一下
        部署在上面的服务的log，看一下代码执行的情况，这时候给开发人员太多权限就完全没有必要，假如一个不熟悉命令的开发人员
        在服务器上执行了一个删除命令，本来只是想删除一个普通的目录，结果因为少了一个空格把服务器整个目录都删除了，服务器也
        就挂了因此普通用户能执行的命令是要受限制的，能访问的文件和目录也同样要受限制

        2.数据隔离：不同的权限能看到及操作不同的数据

            举例：不同部门的老大能看到自己手下的信息，其他部门的就看不到了，比如一个员工请假，他的领导能看到他的审批就可以
            了其他部门的领导就没必要看到

            再举个例子，公司财务部门的人才能看到公司财务相关的数据，其他人就不能随便看到，公司里每个人的工资信息是保密的，
            数据只能被财务和指定的人进行查看，比如客服，就不应该看到。

        3.明确职责：运营、客服等不同角色，leader和dev等不同级别

            对于电商后台系统，比如去哪网这种的，拿运营和客服这两个功能来举例，他们的功能有相似的也有不同的
        相似的功能：比如通知订单查询的功能，客服能查到所有用户的订单，因为客户反馈的任何一个订单号，客服都需要查一下订单的
        情况，转给相关人员去处理，对于运营而言，他能看到自己负责的店铺的订单就可以了
        不同的功能：客服能看到客户购买产品后的反馈情况，运营就不需要看到了，相反，运营能看到店铺的业绩情况，客服就看不到了，

        继续举例：leader能在一些人离职后清理掉一些权限，填写清理表单，而普通开发人员则不需要关心这些

        至此，为什么需要权限管理权限就说完了

        权限管理核心

        1.用户--权限：人员少，功能固定，或者特别简单的系统

            权限关系的处理，需要说两点，第一种：直接对用户绑定权限，这种绑定关系适合权限已经是完全固定的情况，要分配的人也
        不多，比如mysql就使用这种关系，mysql的用户在给用户使用的时候，用户功能已经是相当明确的了

            2.RBAC(Role-Based Access Control)用户-角色-权限    基于角色的权限访问控制目前受到广泛的关注，

            在RBAC中，权限与角色相关联，用户通过成为相应的角色成员而得到成为这些角色的权限，这种关联极大的简化了权限的管理，
            在一个组织中，角色是为了完成某种工作而创造出来的，用户则依据它的责任和资格被指派成相应的角色，同时，用户可以很
            容易的从一个角色被指派成另一个角色，角色可根据新的需求和系统的合并而赋予新的权限，而权限也可从某个角色中回收，角
            色与角色之间的关系可以建立起来覆盖更广泛的客观情况，RBAC关注点在于  Roles----User-----Permissions三者之间的
            关系，Roles和User之间的关系称为UserAssignment，Roles和permissions称为PermissionsAssignment，关系的左右两
            边都是多与多之间的关系，每个User可以有多个Roles，每个Roles可以包括多个User，现实中许多人可以有相同的权限，
            RBAC扩展出Group这个概念，Group和User都和组织机构有关系，但又不是组织结构，在概念上是不同的，组织机构是物理存在
            的公司机构的抽象模型，包括，部门，人，职位，等等，权限模型是对抽象概念的描述，例如，可以有副经理这个Group，这个
            Group里的人，都拥有副经理这个Group赋予的相同的职责，引入Group这个概念用来解决多人相同权限这个问题外，还可以用
            来解决组织机构另一种授权问题，比如A部门的新闻，希望所有A部门的人都能看，有了A部门对应的Group，就可以直接授权给这
            个Group

        RBAC设计支持三个著名的安全原则，最小权限原则，责任分离原则，数据抽象原则，

            最小权限原则：之所以被RBAC支持，是因为RBAC可以将角色配置成其完成任务所需要的最小的权限级。
            责任分离原则：可以通过相互独立互斥的角色，来共同完成敏感的任务而体现，比如要求一个记账员和财务管理员共同参与同一个勾账
            数据抽象原则：可以通过权限的抽象来体现，如财务操作借款，存款等这些抽象权限，而不是操作系统提供的典型读写执行权限，

        这些原则都需要RBAC各部件相互配合才能得以体现

        理想中的权限管理系统是什么样的？

        1.能实现角色级权限：RBAC
        2.能实现功能级数据级权限
        3.简单易操作，能够应对各种需求

        相关操作页面

        权限操作页面，角色管理页面，用户管理页面
        角色和权限关系维护界面、用户和角色关系维护界面
